import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    Button,
    FlatList,
    Switch,
    TouchableOpacity,
    ToastAndroid,
} from 'react-native';
import BluetoothSerial from 'react-native-bluetooth-serial';

const _ = require('lodash');

const styles = StyleSheet.create({
    container: {
        backgroundColor: '#E51414',
    },
    toolbar: {
        // paddingTop: 30,
        // paddingBottom: 30,
        // flexDirection: 'row',
    },
    toolbarButton: {
        // width: 50,
        // marginTop: 8,
    },
    toolbarTitle: {
        // textAlign: 'center',
        // fontWeight: 'bold',
        // fontSize: 20,
        // flex: 1,
        // marginTop: 6,
    },
    deviceName: {
        // fontSize: 17,
        // color: 'black',
    },
    deviceNameWrap: {
        // margin: 10,
        // borderBottomWidth: 1,
    },
    buttonTouchable: {
        fontSize: 21,
        backgroundColor: '#0061a8',
        marginTop: 32,
        borderRadius: 15,
        width: 50,
        justifyContent: 'center',
        alignItems: 'center',
        height: 44,
    },
});

export default class App extends Component {
    constructor(props) {
        super(props);
        this.state = {
            isEnabled: false,
            discovering: false,
            devices: [],
            unpairedDevices: [],
            connected: false,
        };
    }

    componentWillMount() {
        console.tron.log('ComponentWillMount');
        Promise.all([BluetoothSerial.isEnabled(), BluetoothSerial.list()]).then(
            values => {
                const [isEnabled, devices] = values;
                console.tron.log(values);
                this.setState({ isEnabled, devices });
            }
        );

        BluetoothSerial.on('bluetoothEnabled', () => {
            Promise.all([
                BluetoothSerial.isEnabled(),
                BluetoothSerial.list(),
            ]).then(values => {
                console.tron.log(values);
                const [isEnabled, devices] = values;
                this.setState({ devices });
            });

            BluetoothSerial.on('bluetoothDisabled', () => {
                this.setState({ devices: [] });
            });
            BluetoothSerial.on('error', err =>
                console.log(`Error: ${err.message}`)
            );
        });
    }

    connect(device) {
        this.setState({ connecting: true });
        BluetoothSerial.connect(device.id)
            .then(res => {
                console.log(`Connected to device ${device.name}`);
                this.setState({ connecting: false });
                ToastAndroid.show(
                    `Connected to device ${device.name}`,
                    ToastAndroid.SHORT
                );
            })
            .catch(err => console.log(err.message));
    }

    enable() {
        console.tron.log('Ativando...', this.state);
        BluetoothSerial.enable()
            .then(res => this.setState({ isEnabled: true }))
            // .catch(err => Toast.showShortBottom(err.message));
            .catch(err => console.tron.log(err.message));
    }

    disable() {
        console.tron.log('Disable');
        BluetoothSerial.disconnect();
        BluetoothSerial.disable()
            .then(res =>
                this.setState({
                    isEnabled: false,
                    discovering: false,
                    devices: [],
                    unpairedDevices: [],
                    connected: false,
                })
            )
            // .catch(err => Toast.showShortBottom(err.message));
            .catch(err => console.tron.log(err.message));
    }

    toggleBluetooth(value) {
        if (value === true) {
            this.enable();
        } else {
            this.disable();
        }
    }

    discoverAvailableDevices() {
        const { discovering } = this.state;
        console.tron.log(discovering);
        if (discovering) {
            return;
        }
        this.setState({ discovering: true });
        BluetoothSerial.discoverUnpairedDevices()
            .then(unpairedDevices => {
                const uniqueDevices = _.uniqBy(unpairedDevices, 'id');
                console.log(uniqueDevices);
                this.setState({
                    unpairedDevices: uniqueDevices,
                    discovering: false,
                });
            })
            .catch(err => console.log(err.message));
    }

    toggleSwitch() {
        BluetoothSerial.write('T')
            .then(res => {
                console.log(res);
                console.log('Successfuly wrote to device');
                this.setState({ connected: true });
            })
            .catch(err => console.log(err.message));
    }

    renderItem(item) {
        return (
            <TouchableOpacity onPress={() => this.connect(item.item)}>
                <View style={styles.deviceNameWrap}>
                    <Text style={styles.deviceName}>
                        {item.item.name ? item.item.name : item.item.id}
                    </Text>
                </View>
            </TouchableOpacity>
        );
    }

    render() {
        const {
            connecting,
            connected,
            unpairedDevices,
            isEnabled,
            devices,
        } = this.state;

        return (
            <View style={styles.container}>
                <View style={styles.toolbar}>
                    <Text style={styles.toolbarTitle}>
                        Bluetooth Device List
                    </Text>
                    <View style={styles.toolbarButton}>
                        <Switch
                            value={isEnabled}
                            onValueChange={val => this.toggleBluetooth(val)}
                        />
                    </View>
                </View>
                <Button
                    onPress={() => this.discoverAvailableDevices()}
                    title="Scan for Devices"
                    color="#841584"
                />
                <FlatList
                    style={{}}
                    data={unpairedDevices}
                    keyExtractor={item => item.id}
                    renderItem={item => this.renderItem(item)}
                />
                <Button
                    onPress={() => this.toggleSwitch()}
                    title="Switch(On/Off)"
                    color="#841584"
                />
                <TouchableOpacity
                    style={styles.buttonTouchable}
                    onPress={() => this.discoverAvailableDevices()}
                >
                    <Text style={styles.buttonTextStyle}>OK. Got it!</Text>
                </TouchableOpacity>
            </View>
        );
    }
}
